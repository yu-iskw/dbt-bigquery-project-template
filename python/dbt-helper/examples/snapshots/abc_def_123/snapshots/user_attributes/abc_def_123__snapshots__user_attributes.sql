-- It was generated by dbt-helper==1.0.0.

{#
Please carefully design a dbt snapshot, because dbt can't rebuild snapshots.
Once we have created a dbt snapshot, we can't apply changes to the table.
Even `full_refresh=true` doesn't work.

If we really have to rebuild a snapshot, please use `drop_statement` with `pre_hook`.
We run a schedule job adding the drop statement and then remove the drop statement.
The scheduled job of the snapshot will be surely failed with the drop statement.
But there is no other way to reset the table.
#}

{% snapshot abc_def_123__snapshots__user_attributes %}

{% set gcp_project = var("projects")["dev_project_id"] | default(var("projects")["abc-def-123"], True) %}
{% set snapshot_owner = "analytics_team" %}

{% set drop_statement = "DROP TABLE `%s`.`snapshots`.`user_attributes`" | format(gcp_project) %}


{{
  config(
    enabled=true,
    owner=snapshot_owner,
    persist_docs={"relation": true, "columns": true},
    strategy="timestamp",
    target_database=gcp_project,
    target_schema="snapshots",
    pre_hook=[],
    alias="user_attributes",
    unique_key="TODO set unique_key"
    updated_at="TODO set updated_at",
    partition_by={
      'field': 'TODO set field if necessary',
      'data_type': '<timestamp | date | datetime | int64 >'
    },
    cluster_by=["TODO set cluster_by if necessary"],
    labels={
      "modeled": "dbt",
      "contains_pii": "<false | true>",
      "owner": snapshot_owner,
      "scheduler": "airflow",
      "status": "experimental",
      },
    tags=[
      'daily',
      'snapshots',
      ],
  )
}}

SELECT ...

{% endsnapshot %}